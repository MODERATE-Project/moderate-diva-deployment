version: "3"

vars:
  IMAGE_REGISTRY_URL: gitlab.linksfoundation.com:5050
  GIT_URL_ANSIBLE_CONFIGURATOR: git@gitlab.linksfoundation.com:csc/csc-projects/moderate/ansible-configurator.git
  GIT_URL_KAFKA_SETUP: git@gitlab.linksfoundation.com:csc/csc-projects/moderate/kafka.git
  GIT_URL_KEYCLOAK_SETUP: git@gitlab.linksfoundation.com:csc/csc-projects/moderate/keycloak.git
  GIT_URL_NIFI_SETUP: git@gitlab.linksfoundation.com:csc/csc-projects/moderate/nifi.git
  ANSIBLE_CONFIGURATOR_DIR: ansible-configurator
  KAFKA_SETUP_DIR: kafka
  KEYCLOAK_SETUP_DIR: keycloak
  NIFI_SETUP_DIR: nifi
  CONFIG_DIR: config
  CERT_DIR: certificates
  SERVER_KEY: "{{.ROOT_DIR}}/{{.CERT_DIR}}/server.key"
  SERVER_CRT: "{{.ROOT_DIR}}/{{.CERT_DIR}}/server.crt"
  KEYSTORE_JKS: "{{.ROOT_DIR}}/{{.CERT_DIR}}/keystore.jks"
  TRUSTSTORE_JKS: "{{.ROOT_DIR}}/{{.CERT_DIR}}/truststore.jks"
  KEYSTORE_P12: "{{.ROOT_DIR}}/{{.CERT_DIR}}/keystore.p12"

dotenv:
  - .env
  - .env.default

tasks:
  # Configuration Validation
  validate-config:
    desc: "Check that all required environment variables are set"
    cmds:
      - ./scripts/validate-config.sh

  # System Requirements & Dependencies
  check-dependencies:
    desc: "Verify that Docker, Ansible, Python and other required tools are installed"
    deps:
      - validate-config
    cmds:
      - docker --version
      - docker compose version
      - python3 --version
      - ansible --version
      - envsubst --help > /dev/null

  # Environment Setup
  setup:
    desc: "Set up the deployment environment by cloning repositories and logging into registry"
    deps:
      - check-dependencies
    cmds:
      - clone
      - login-registry

  clone-ansible-configurator:
    desc: "Clone the ansible-configurator repository"
    cmds:
      - git clone {{.GIT_URL_ANSIBLE_CONFIGURATOR}} {{.ANSIBLE_CONFIGURATOR_DIR}}
    status:
      - test -d {{.ANSIBLE_CONFIGURATOR_DIR}}

  clone:
    desc: "Clone all required repositories"
    cmds:
      - task: clone-ansible-configurator

  login-registry:
    desc: "Log into the Docker registry to access private images"
    cmds:
      - docker login {{.IMAGE_REGISTRY_URL}}

  # Certificate Management
  create-cert-dir:
    desc: "Create the certificates directory"
    cmds:
      - mkdir -p {{.CERT_DIR}}
    status:
      - test -d {{.CERT_DIR}}

  # Let's Encrypt Certificate Tasks
  generate-certificates:
    desc: "Generate SSL certificates using Let's Encrypt"
    deps:
      - create-cert-dir
      - validate-config
    cmds:
      - task: run-certbot
      - task: convert-letsencrypt-to-java-stores
      - task: setup-letsencrypt-truststore

  run-certbot:
    desc: "Obtain SSL certificates from Let's Encrypt using certbot"
    deps:
      - create-cert-dir
    cmds:
      - >
        docker run --rm
        -v {{.ROOT_DIR}}/{{.CERT_DIR}}:/etc/letsencrypt
        -v {{.ROOT_DIR}}/{{.CERT_DIR}}/webroot:/var/www/certbot
        -p 80:80
        certbot/certbot certonly
        --standalone
        --non-interactive
        --agree-tos
        --email {{.LETSENCRYPT_EMAIL}}
        -d {{.MACHINE_URL}}
      - cp {{.ROOT_DIR}}/{{.CERT_DIR}}/live/{{.MACHINE_URL}}/privkey.pem {{.SERVER_KEY}}
      - cp {{.ROOT_DIR}}/{{.CERT_DIR}}/live/{{.MACHINE_URL}}/fullchain.pem {{.SERVER_CRT}}
    status:
      - test -f {{.SERVER_KEY}} && test -f {{.SERVER_CRT}}

  convert-letsencrypt-to-java-stores:
    desc: "Convert Let's Encrypt certificates to Java keystore format"
    deps:
      - run-certbot
    cmds:
      - >
        openssl pkcs12 -export
        -in {{.SERVER_CRT}}
        -inkey {{.SERVER_KEY}}
        -out {{.KEYSTORE_P12}}
        -name server
        -password pass:{{.GENERIC_PSW}}
      - >
        keytool -importkeystore
        -srckeystore {{.KEYSTORE_P12}}
        -srcstoretype PKCS12
        -destkeystore {{.KEYSTORE_JKS}}
        -deststoretype JKS
        -srcstorepass {{.GENERIC_PSW}}
        -deststorepass {{.GENERIC_PSW}}
        -noprompt
    status:
      - test -f {{.KEYSTORE_JKS}}

  setup-letsencrypt-truststore:
    desc: "Create Java truststore with Let's Encrypt root certificates"
    deps:
      - create-cert-dir
    cmds:
      - |
        # Download Let's Encrypt root and intermediate certificates
        curl -s https://letsencrypt.org/certs/isrgrootx1.pem -o {{.ROOT_DIR}}/{{.CERT_DIR}}/isrgrootx1.pem
        curl -s https://letsencrypt.org/certs/lets-encrypt-r3.pem -o {{.ROOT_DIR}}/{{.CERT_DIR}}/lets-encrypt-r3.pem
      - >
        keytool -import -trustcacerts -alias letsencrypt-root
        -file {{.ROOT_DIR}}/{{.CERT_DIR}}/isrgrootx1.pem
        -keystore {{.TRUSTSTORE_JKS}}
        -storepass {{.GENERIC_PSW}} -noprompt
      - >
        keytool -import -trustcacerts -alias letsencrypt-intermediate
        -file {{.ROOT_DIR}}/{{.CERT_DIR}}/lets-encrypt-r3.pem
        -keystore {{.TRUSTSTORE_JKS}}
        -storepass {{.GENERIC_PSW}} -noprompt
    status:
      - test -f {{.TRUSTSTORE_JKS}}

  renew-certificates:
    desc: "Renew existing Let's Encrypt certificates"
    cmds:
      - >
        docker run --rm
        -v {{.ROOT_DIR}}/{{.CERT_DIR}}:/etc/letsencrypt
        -v {{.ROOT_DIR}}/{{.CERT_DIR}}/webroot:/var/www/certbot
        certbot/certbot renew
        --non-interactive
      - cp {{.ROOT_DIR}}/{{.CERT_DIR}}/live/{{.MACHINE_URL}}/privkey.pem {{.SERVER_KEY}}
      - cp {{.ROOT_DIR}}/{{.CERT_DIR}}/live/{{.MACHINE_URL}}/fullchain.pem {{.SERVER_CRT}}
      - task: convert-letsencrypt-to-java-stores

  verify-certificates:
    desc: "Verify that SSL certificates are valid and display their details"
    deps:
      - generate-certificates
    env:
      SERVER_CRT: "{{.SERVER_CRT}}"
      KEYSTORE_JKS: "{{.KEYSTORE_JKS}}"
      TRUSTSTORE_JKS: "{{.TRUSTSTORE_JKS}}"
      KEYSTORE_PASSWORD: "{{.GENERIC_PSW}}"
    cmds:
      - ./scripts/verify-certificates.sh

  # Configuration & Deployment
  configure-ansible:
    desc: "Generate Ansible configuration files from templates"
    deps:
      - clone-ansible-configurator
      - validate-config
    cmds:
      - envsubst < {{.CONFIG_DIR}}/general.params.yml.tpl > {{.ANSIBLE_CONFIGURATOR_DIR}}/params.yml
      - envsubst < {{.CONFIG_DIR}}/keycloak.params.yml.tpl > {{.ANSIBLE_CONFIGURATOR_DIR}}/Keycloak/params.yml
      - envsubst < {{.CONFIG_DIR}}/kafka.params.yml.tpl > {{.ANSIBLE_CONFIGURATOR_DIR}}/Kafka/params.yml
      - envsubst < {{.CONFIG_DIR}}/nifi.params.yml.tpl > {{.ANSIBLE_CONFIGURATOR_DIR}}/NiFi/params.yml
      - envsubst < {{.CONFIG_DIR}}/nifi_processors.params.yml.tpl > {{.ANSIBLE_CONFIGURATOR_DIR}}/NiFi_Processors/params.yml
      - envsubst < {{.CONFIG_DIR}}/quality_reporter.params.yml.tpl > {{.ANSIBLE_CONFIGURATOR_DIR}}/Quality_Reporter/params.yml

  deploy:
    desc: "Deploy the complete DIVA infrastructure using Ansible"
    deps:
      - configure-ansible
    dir: "{{.ANSIBLE_CONFIGURATOR_DIR}}"
    cmds:
      - ansible-playbook -K ansible-plb.yml

  down:
    desc: "Stop and remove all DIVA services"
    dir: "{{.ANSIBLE_CONFIGURATOR_DIR}}"
    cmds:
      - ansible-playbook -K ansible-plb.yml --tags never

  # OAuth Configuration Update
  update-oauth:
    desc: "Update OAuth client secrets and redeploy services"
    deps:
      - validate-config
    cmds:
      - task: configure-ansible
      - task: deploy

  # Main Deployment Task
  diva:
    desc: "Deploy DIVA with Let's Encrypt certificates (complete setup)"
    deps:
      - validate-config
    cmds:
      - task: setup
      - task: generate-certificates
      - task: verify-certificates
      - task: configure-ansible
      - task: deploy

  # Cleanup Tasks
  clean-certificates:
    desc: "Remove all generated SSL certificates and keystores"
    cmds:
      - rm -rf {{.CERT_DIR}}

  clean:
    desc: "Remove all generated files and cloned repositories"
    cmds:
      - rm -rf {{.ROOT_DIR}}/{{.ANSIBLE_CONFIGURATOR_DIR}}
      - rm -rf {{.ROOT_DIR}}/{{.KAFKA_SETUP_DIR}}
      - rm -rf {{.ROOT_DIR}}/{{.KEYCLOAK_SETUP_DIR}}
      - rm -rf {{.ROOT_DIR}}/{{.NIFI_SETUP_DIR}}
      - task: clean-certificates
