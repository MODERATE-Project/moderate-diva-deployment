version: "3"

vars:
  IMAGE_REGISTRY_URL: gitlab.linksfoundation.com:5050
  GIT_URL_ANSIBLE_CONFIGURATOR: git@gitlab.linksfoundation.com:csc/csc-projects/moderate/ansible-configurator.git
  GIT_URL_KAFKA_SETUP: git@gitlab.linksfoundation.com:csc/csc-projects/moderate/kafka.git
  GIT_URL_KEYCLOAK_SETUP: git@gitlab.linksfoundation.com:csc/csc-projects/moderate/keycloak.git
  GIT_URL_NIFI_SETUP: git@gitlab.linksfoundation.com:csc/csc-projects/moderate/nifi.git
  ANSIBLE_CONFIGURATOR_DIR: ansible-configurator
  KAFKA_SETUP_DIR: kafka
  KEYCLOAK_SETUP_DIR: keycloak
  NIFI_SETUP_DIR: nifi
  QUALITY_REPORTER_SETUP_DIR: quality_reporter
  CONFIG_DIR: config
  CERT_DIR: certificates
  SERVER_KEY: "{{.ROOT_DIR}}/{{.CERT_DIR}}/server.key"
  SERVER_CRT: "{{.ROOT_DIR}}/{{.CERT_DIR}}/server.crt"
  KEYSTORE_JKS: "{{.ROOT_DIR}}/{{.CERT_DIR}}/keystore.jks"
  TRUSTSTORE_JKS: "{{.ROOT_DIR}}/{{.CERT_DIR}}/truststore.jks"
  KEYSTORE_P12: "{{.ROOT_DIR}}/{{.CERT_DIR}}/keystore.p12"
  LETSENCRYPT_X1_URL: "https://letsencrypt.org/certs/isrgrootx1.pem"
  LETSENCRYPT_R3_URL: "https://letsencrypt.org/certs/lets-encrypt-r3.pem"
  CADDY_COMPOSE_FILE: "{{.ROOT_DIR}}/docker-compose-caddy.yml"

dotenv:
  - .env
  - .env.default

tasks:
  validate-config:
    desc: "Check that all required environment variables are set"
    cmds:
      - ./scripts/validate-config.sh

  check-dependencies:
    desc: "Verify that Docker, Ansible, Python and other required tools are installed"
    deps:
      - validate-config
    cmds:
      - docker --version
      - docker compose version
      - python3 --version
      - ansible --version
      - envsubst --help
      - keytool --help

  setup:
    desc: "Set up the deployment environment by cloning repositories and logging into registry"
    deps:
      - check-dependencies
    cmds:
      - task: clone
      - task: login-registry

  clone-ansible-configurator:
    desc: "Clone the ansible-configurator repository and apply NiFi fix"
    cmds:
      - git clone {{.GIT_URL_ANSIBLE_CONFIGURATOR}} {{.ROOT_DIR}}/{{.ANSIBLE_CONFIGURATOR_DIR}}
      - >
        cp {{.ROOT_DIR}}/overrides/nifi-ansible-plb.yml
        {{.ROOT_DIR}}/{{.ANSIBLE_CONFIGURATOR_DIR}}/NiFi/ansible-plb.yml
    status:
      - test -d {{.ANSIBLE_CONFIGURATOR_DIR}}

  clone:
    desc: "Clone all required repositories"
    cmds:
      - task: clone-ansible-configurator

  login-registry:
    desc: "Log into the Docker registry to access private images"
    cmds:
      - docker login {{.IMAGE_REGISTRY_URL}}

  create-dirs:
    desc: "Create the required directories"
    cmds:
      - mkdir -p {{.ROOT_DIR}}/{{.CERT_DIR}}
      - mkdir -p {{.ROOT_DIR}}/caddy/data
    status:
      - test -d {{.ROOT_DIR}}/{{.CERT_DIR}}

  start-caddy:
    desc: "Start Caddy server for SSL certificate management"
    deps:
      - create-dirs
    cmds:
      - docker compose -f {{.CADDY_COMPOSE_FILE}} up -d --wait

  stop-caddy:
    desc: "Stop Caddy server"
    cmds:
      - docker compose -f {{.CADDY_COMPOSE_FILE}} down

  copy-caddy-certificates:
    desc: "Copy SSL certificates from Caddy data directory to expected file locations (enables auto-renewal)"
    deps:
      - start-caddy
    cmds:
      - ./scripts/copy-caddy-certs.sh {{.MACHINE_URL}} {{.ROOT_DIR}}/{{.CERT_DIR}}

  convert-letsencrypt-to-java-stores:
    desc: "Convert Let's Encrypt certificates to Java keystore format"
    cmds:
      - >
        openssl pkcs12 -export
        -in {{.SERVER_CRT}}
        -inkey {{.SERVER_KEY}}
        -out {{.KEYSTORE_P12}}
        -name server
        -password pass:{{.GENERIC_PSW}}
      - >
        keytool -importkeystore
        -srckeystore {{.KEYSTORE_P12}}
        -srcstoretype PKCS12
        -destkeystore {{.KEYSTORE_JKS}}
        -deststoretype JKS
        -srcstorepass {{.GENERIC_PSW}}
        -deststorepass {{.GENERIC_PSW}}
        -noprompt
    preconditions:
      - test -f {{.SERVER_KEY}} && test -f {{.SERVER_CRT}}

  setup-letsencrypt-truststore:
    desc: "Create Java truststore with Let's Encrypt root certificates"
    deps:
      - create-dirs
    cmds:
      - curl -s {{.LETSENCRYPT_X1_URL}} -o {{.ROOT_DIR}}/{{.CERT_DIR}}/isrgrootx1.pem
      - curl -s {{.LETSENCRYPT_R3_URL}} -o {{.ROOT_DIR}}/{{.CERT_DIR}}/lets-encrypt-r3.pem
      - >
        keytool -import -trustcacerts -alias letsencrypt-root
        -file {{.ROOT_DIR}}/{{.CERT_DIR}}/isrgrootx1.pem
        -keystore {{.TRUSTSTORE_JKS}}
        -storepass {{.GENERIC_PSW}} -noprompt
      - >
        keytool -import -trustcacerts -alias letsencrypt-intermediate
        -file {{.ROOT_DIR}}/{{.CERT_DIR}}/lets-encrypt-r3.pem
        -keystore {{.TRUSTSTORE_JKS}}
        -storepass {{.GENERIC_PSW}} -noprompt
    status:
      - test -f {{.TRUSTSTORE_JKS}}

  verify-certificates:
    desc: "Verify that SSL certificates are valid and display their details"
    env:
      SERVER_CRT: "{{.SERVER_CRT}}"
      KEYSTORE_JKS: "{{.KEYSTORE_JKS}}"
      TRUSTSTORE_JKS: "{{.TRUSTSTORE_JKS}}"
      KEYSTORE_PASSWORD: "{{.GENERIC_PSW}}"
    cmds:
      - ./scripts/verify-certificates.sh

  process-configuration-templates:
    desc: "Substitute placeholders in templates with environment variables and move them to the correct directory"
    deps:
      - clone-ansible-configurator
      - validate-config
    cmds:
      - envsubst < {{.CONFIG_DIR}}/general.params.yml.tpl > {{.ANSIBLE_CONFIGURATOR_DIR}}/params.yml
      - envsubst < {{.CONFIG_DIR}}/keycloak.params.yml.tpl > {{.ANSIBLE_CONFIGURATOR_DIR}}/Keycloak/params.yml
      - envsubst < {{.CONFIG_DIR}}/kafka.params.yml.tpl > {{.ANSIBLE_CONFIGURATOR_DIR}}/Kafka/params.yml
      - envsubst < {{.CONFIG_DIR}}/nifi.params.yml.tpl > {{.ANSIBLE_CONFIGURATOR_DIR}}/NiFi/params.yml
      - envsubst < {{.CONFIG_DIR}}/nifi_processors.params.yml.tpl > {{.ANSIBLE_CONFIGURATOR_DIR}}/NiFi_Processors/params.yml
      - envsubst < {{.CONFIG_DIR}}/quality_reporter.params.yml.tpl > {{.ANSIBLE_CONFIGURATOR_DIR}}/Quality_Reporter/params.yml

  deploy:
    desc: "Deploy the complete DIVA infrastructure using Ansible"
    deps:
      - process-configuration-templates
    dir: "{{.ANSIBLE_CONFIGURATOR_DIR}}"
    cmds:
      - ansible-playbook -K ansible-plb.yml

  down:
    desc: "Stop and remove all DIVA services"
    dir: "{{.ANSIBLE_CONFIGURATOR_DIR}}"
    cmds:
      - ansible-playbook -K ansible-plb.yml --tags never

  diva:
    desc: "Deploy DIVA with Let's Encrypt certificates (complete setup)"
    deps:
      - validate-config
    cmds:
      - task: verify-certificates
      - task: process-configuration-templates
      - task: deploy
    preconditions:
      - test -d {{.ROOT_DIR}}/{{.ANSIBLE_CONFIGURATOR_DIR}}

  clean:
    desc: "Remove all generated files and cloned repositories"
    cmds:
      - task: stop-caddy
      - cmd: cd {{.ROOT_DIR}}/{{.KAFKA_SETUP_DIR}} && docker compose down
        ignore_error: true
      - cmd: cd {{.ROOT_DIR}}/{{.KEYCLOAK_SETUP_DIR}} && docker compose down
        ignore_error: true
      - cmd: cd {{.ROOT_DIR}}/{{.NIFI_SETUP_DIR}} && docker compose down
        ignore_error: true
      - cmd: cd {{.ROOT_DIR}}/{{.QUALITY_REPORTER_SETUP_DIR}} && docker compose down
        ignore_error: true
      - rm -rf {{.ROOT_DIR}}/{{.KAFKA_SETUP_DIR}}
      - rm -rf {{.ROOT_DIR}}/{{.KEYCLOAK_SETUP_DIR}}
      - rm -rf {{.ROOT_DIR}}/{{.NIFI_SETUP_DIR}}
      - rm -rf {{.ROOT_DIR}}/{{.QUALITY_REPORTER_SETUP_DIR}}
      - rm -rf {{.ROOT_DIR}}/{{.ANSIBLE_CONFIGURATOR_DIR}}
      - rm -rf {{.ROOT_DIR}}/{{.CERT_DIR}}