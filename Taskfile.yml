version: "3"

vars:
  IMAGE_REGISTRY_URL: gitlab.linksfoundation.com:5050
  GIT_URL_ANSIBLE_CONFIGURATOR: git@gitlab.linksfoundation.com:csc/csc-projects/moderate/ansible-configurator.git
  GIT_URL_KAFKA_SETUP: git@gitlab.linksfoundation.com:csc/csc-projects/moderate/kafka.git
  GIT_URL_KEYCLOAK_SETUP: git@gitlab.linksfoundation.com:csc/csc-projects/moderate/keycloak.git
  GIT_URL_NIFI_SETUP: git@gitlab.linksfoundation.com:csc/csc-projects/moderate/nifi.git
  ANSIBLE_CONFIGURATOR_DIR: ansible-configurator
  KAFKA_SETUP_DIR: kafka
  KEYCLOAK_SETUP_DIR: keycloak
  NIFI_SETUP_DIR: nifi
  CONFIG_DIR: config
  CERT_DIR: certificates
  CA_KEY: "{{.ROOT_DIR}}/{{.CERT_DIR}}/ca.key"
  CA_CRT: "{{.ROOT_DIR}}/{{.CERT_DIR}}/ca.crt"
  CA_PEM: "{{.ROOT_DIR}}/{{.CERT_DIR}}/ca.pem"
  CA_DER: "{{.ROOT_DIR}}/{{.CERT_DIR}}/ca.der"
  SERVER_KEY: "{{.ROOT_DIR}}/{{.CERT_DIR}}/server.key"
  SERVER_CSR: "{{.ROOT_DIR}}/{{.CERT_DIR}}/server.csr"
  SERVER_CRT: "{{.ROOT_DIR}}/{{.CERT_DIR}}/server.crt"
  KEYSTORE_JKS: "{{.ROOT_DIR}}/{{.CERT_DIR}}/keystore.jks"
  TRUSTSTORE_JKS: "{{.ROOT_DIR}}/{{.CERT_DIR}}/truststore.jks"
  KEYSTORE_P12: "{{.ROOT_DIR}}/{{.CERT_DIR}}/keystore.p12"

dotenv:
  - .env
  - .env.default

tasks:
  # Configuration Validation
  validate-config:
    desc: "Validate mandatory configuration variables - Ensures all required variables are properly set before deployment"
    cmds:
      - ./scripts/validate-config.sh

  # System Requirements & Dependencies
  check-dependencies:
    desc: "Check system requirements - Verify Docker, Ansible, Python and required tools are installed"
    deps: [validate-config]
    cmds:
      - docker --version
      - docker compose version
      - ansible --version
      - python3 --version
      - python3 -c "import jinja2; print(jinja2.__version__)" || exit 1
      - envsubst --help > /dev/null

  # Environment Setup
  setup:
    desc: "Initial environment setup - Clone repositories and authenticate with registry"
    deps: [check-dependencies]
    cmds:
      - task: clone
      - task: login-registry

  clone-ansible-configurator:
    desc: "Clone ansible-configurator repository - Downloads the main deployment configuration"
    cmds:
      - git clone {{.GIT_URL_ANSIBLE_CONFIGURATOR}} {{.ANSIBLE_CONFIGURATOR_DIR}}
    status:
      - test -d {{.ANSIBLE_CONFIGURATOR_DIR}}

  clone:
    desc: "Clone all required repositories - Ensures all deployment dependencies are available"
    cmds:
      - task: clone-ansible-configurator

  login-registry:
    desc: "Authenticate with Docker registry - Required to pull private container images"
    cmds:
      - docker login {{.IMAGE_REGISTRY_URL}}

  # Certificate Management
  create-cert-dir:
    desc: "Create certificates directory - Prepares workspace for SSL certificate generation"
    cmds:
      - mkdir -p {{.CERT_DIR}}
    status:
      - test -d {{.CERT_DIR}}

  # Let's Encrypt Certificate Tasks
  generate-letsencrypt-certificates:
    desc: "Generate Let's Encrypt SSL certificates - Uses certbot in Docker for trusted certificates"
    deps: [create-cert-dir, validate-config]
    cmds:
      - task: run-certbot
      - task: convert-letsencrypt-to-java-stores
      - task: setup-letsencrypt-truststore

  run-certbot:
    desc: "Run certbot to obtain Let's Encrypt certificates"
    deps: [create-cert-dir]
    cmds:
      - >
        docker run --rm
        -v {{.ROOT_DIR}}/{{.CERT_DIR}}:/etc/letsencrypt
        -v {{.ROOT_DIR}}/{{.CERT_DIR}}/webroot:/var/www/certbot
        -p 80:80
        certbot/certbot certonly
        --standalone
        --non-interactive
        --agree-tos
        --email {{.LETSENCRYPT_EMAIL}}
        -d {{.MACHINE_URL}}
      - cp {{.ROOT_DIR}}/{{.CERT_DIR}}/live/{{.MACHINE_URL}}/privkey.pem {{.SERVER_KEY}}
      - cp {{.ROOT_DIR}}/{{.CERT_DIR}}/live/{{.MACHINE_URL}}/fullchain.pem {{.SERVER_CRT}}
    status:
      - test -f {{.SERVER_KEY}} && test -f {{.SERVER_CRT}}

  convert-letsencrypt-to-java-stores:
    desc: "Convert Let's Encrypt certificates to Java keystores"
    deps: [run-certbot]
    cmds:
      - >
        openssl pkcs12 -export
        -in {{.SERVER_CRT}}
        -inkey {{.SERVER_KEY}}
        -out {{.KEYSTORE_P12}}
        -name server
        -password pass:{{.GENERIC_PSW}}
      - >
        keytool -importkeystore
        -srckeystore {{.KEYSTORE_P12}}
        -srcstoretype PKCS12
        -destkeystore {{.KEYSTORE_JKS}}
        -deststoretype JKS
        -srcstorepass {{.GENERIC_PSW}}
        -deststorepass {{.GENERIC_PSW}}
        -noprompt
    status:
      - test -f {{.KEYSTORE_JKS}}

  setup-letsencrypt-truststore:
    desc: "Create Java truststore with Let's Encrypt CA certificates"
    deps: [create-cert-dir]
    cmds:
      - |
        # Download Let's Encrypt root and intermediate certificates
        curl -s https://letsencrypt.org/certs/isrgrootx1.pem -o {{.ROOT_DIR}}/{{.CERT_DIR}}/isrgrootx1.pem
        curl -s https://letsencrypt.org/certs/lets-encrypt-r3.pem -o {{.ROOT_DIR}}/{{.CERT_DIR}}/lets-encrypt-r3.pem
      - >
        keytool -import -trustcacerts -alias letsencrypt-root
        -file {{.ROOT_DIR}}/{{.CERT_DIR}}/isrgrootx1.pem
        -keystore {{.TRUSTSTORE_JKS}}
        -storepass {{.GENERIC_PSW}} -noprompt
      - >
        keytool -import -trustcacerts -alias letsencrypt-intermediate
        -file {{.ROOT_DIR}}/{{.CERT_DIR}}/lets-encrypt-r3.pem
        -keystore {{.TRUSTSTORE_JKS}}
        -storepass {{.GENERIC_PSW}} -noprompt
    status:
      - test -f {{.TRUSTSTORE_JKS}}

  renew-letsencrypt-certificates:
    desc: "Renew Let's Encrypt certificates - Run this periodically"
    cmds:
      - >
        docker run --rm
        -v {{.ROOT_DIR}}/{{.CERT_DIR}}:/etc/letsencrypt
        -v {{.ROOT_DIR}}/{{.CERT_DIR}}/webroot:/var/www/certbot
        certbot/certbot renew
        --non-interactive
      - cp {{.ROOT_DIR}}/{{.CERT_DIR}}/live/{{.MACHINE_URL}}/privkey.pem {{.SERVER_KEY}}
      - cp {{.ROOT_DIR}}/{{.CERT_DIR}}/live/{{.MACHINE_URL}}/fullchain.pem {{.SERVER_CRT}}
      - task: convert-letsencrypt-to-java-stores

  generate-ca-key:
    desc: "Generate Certificate Authority private key - Creates the root CA key (4096-bit RSA)"
    deps: [create-cert-dir]
    cmds:
      - openssl genrsa -out {{.CA_KEY}} 4096
    status:
      - test -f {{.CA_KEY}}

  generate-ca-cert:
    desc: "Generate Certificate Authority certificate - Creates the root CA certificate (valid 10 years)"
    deps: [generate-ca-key]
    cmds:
      - openssl req -new -x509 -days 3650 -key {{.CA_KEY}} -out {{.CA_CRT}} -subj "{{.CA_SUBJECT}}"
    status:
      - test -f {{.CA_CRT}}

  generate-ca-pem:
    desc: "Convert CA certificate to PEM format - Creates PEM version for broader compatibility"
    deps: [generate-ca-cert]
    cmds:
      - cp {{.CA_CRT}} {{.CA_PEM}}
    status:
      - test -f {{.CA_PEM}}

  generate-ca-der:
    desc: "Convert CA certificate to DER format - Creates binary DER version for specific applications"
    deps: [generate-ca-cert]
    cmds:
      - openssl x509 -in {{.CA_CRT}} -outform DER -out {{.CA_DER}}
    status:
      - test -f {{.CA_DER}}

  generate-server-key:
    desc: "Generate server private key - Creates private key for SSL server certificate (4096-bit RSA)"
    deps: [create-cert-dir]
    cmds:
      - openssl genrsa -out {{.SERVER_KEY}} 4096
    status:
      - test -f {{.SERVER_KEY}}

  generate-server-csr:
    desc: "Generate server certificate signing request - Creates CSR for server certificate"
    deps: [generate-server-key]
    cmds:
      - openssl req -new -key {{.SERVER_KEY}} -out {{.SERVER_CSR}} -subj "{{.SERVER_SUBJECT}}"
    status:
      - test -f {{.SERVER_CSR}}

  generate-server-cert:
    desc: "Generate signed server certificate - Creates CA-signed server certificate (valid 1 year)"
    deps: [generate-server-csr, generate-ca-cert]
    cmds:
      - openssl x509 -req -in {{.SERVER_CSR}} -CA {{.CA_CRT}} -CAkey {{.CA_KEY}} -CAcreateserial -out {{.SERVER_CRT}} -days 365
    status:
      - test -f {{.SERVER_CRT}}

  generate-pkcs12-keystore:
    desc: "Create PKCS12 keystore - Bundles server certificate and key for Java applications"
    deps: [generate-server-cert]
    cmds:
      - openssl pkcs12 -export -in {{.SERVER_CRT}} -inkey {{.SERVER_KEY}} -out {{.KEYSTORE_P12}} -name server -password pass:{{.GENERIC_PSW}}
    status:
      - test -f {{.KEYSTORE_P12}}

  generate-java-keystore:
    desc: "Convert to Java JKS keystore - Creates Java-compatible keystore from PKCS12"
    deps: [generate-pkcs12-keystore]
    cmds:
      - >
        keytool -importkeystore -srckeystore {{.KEYSTORE_P12}}
        -srcstoretype PKCS12 -destkeystore {{.KEYSTORE_JKS}}
        -deststoretype JKS -srcstorepass {{.GENERIC_PSW}}
        -deststorepass {{.GENERIC_PSW}} -noprompt
    status:
      - test -f {{.KEYSTORE_JKS}}

  generate-java-truststore:
    desc: "Create Java truststore - Stores CA certificate for Java applications to trust connections"
    deps: [generate-ca-cert]
    cmds:
      - keytool -import -trustcacerts -alias ca -file {{.CA_CRT}} -keystore {{.TRUSTSTORE_JKS}} -storepass {{.GENERIC_PSW}} -noprompt
    status:
      - test -f {{.TRUSTSTORE_JKS}}

  generate-certificates:
    desc: "Generate complete SSL certificate chain - Creates all certificates and keystores needed for deployment"
    deps: [validate-config]
    cmds:
      - task: generate-ca-key
      - task: generate-ca-cert
      - task: generate-ca-pem
      - task: generate-ca-der
      - task: generate-server-key
      - task: generate-server-csr
      - task: generate-server-cert
      - task: generate-java-keystore
      - task: generate-java-truststore

  # Alternative certificate generation using Let's Encrypt
  generate-certificates-letsencrypt:
    desc: "Generate Let's Encrypt certificates - Alternative to self-signed certificates for production use"
    deps: [validate-config]
    cmds:
      - task: generate-letsencrypt-certificates

  verify-certificates:
    desc: "Validate SSL certificates - Displays certificate details and verifies the certificate chain"
    deps: [generate-certificates]
    env:
      CA_CRT: "{{.CA_CRT}}"
      SERVER_CRT: "{{.SERVER_CRT}}"
      KEYSTORE_JKS: "{{.KEYSTORE_JKS}}"
      TRUSTSTORE_JKS: "{{.TRUSTSTORE_JKS}}"
      KEYSTORE_PASSWORD: "{{.GENERIC_PSW}}"
    cmds:
      - ./scripts/verify-certificates.sh

  # Configuration & Deployment
  configure-ansible:
    desc: "Configure Ansible playbooks - Generate configuration files from templates using environment variables"
    deps: [clone-ansible-configurator, validate-config]
    cmds:
      - envsubst < {{.CONFIG_DIR}}/general.params.yml.tpl > {{.ANSIBLE_CONFIGURATOR_DIR}}/params.yml
      - envsubst < {{.CONFIG_DIR}}/keycloak.params.yml.tpl > {{.ANSIBLE_CONFIGURATOR_DIR}}/Keycloak/params.yml
      - envsubst < {{.CONFIG_DIR}}/kafka.params.yml.tpl > {{.ANSIBLE_CONFIGURATOR_DIR}}/Kafka/params.yml
      - envsubst < {{.CONFIG_DIR}}/nifi.params.yml.tpl > {{.ANSIBLE_CONFIGURATOR_DIR}}/NiFi/params.yml
      - envsubst < {{.CONFIG_DIR}}/nifi_processors.params.yml.tpl > {{.ANSIBLE_CONFIGURATOR_DIR}}/NiFi_Processors/params.yml
      - envsubst < {{.CONFIG_DIR}}/quality_reporter.params.yml.tpl > {{.ANSIBLE_CONFIGURATOR_DIR}}/Quality_Reporter/params.yml

  deploy:
    desc: "Deploy DIVA infrastructure - Launch all services using Ansible (requires sudo password)"
    deps: [configure-ansible]
    dir: "{{.ANSIBLE_CONFIGURATOR_DIR}}"
    cmds:
      - ansible-playbook -K ansible-plb.yml

  down:
    desc: "Stop and remove all services - Gracefully shutdown the entire DIVA infrastructure"
    dir: "{{.ANSIBLE_CONFIGURATOR_DIR}}"
    cmds:
      - ansible-playbook -K ansible-plb.yml --tags never

  # OAuth Configuration Update
  update-oauth:
    desc: "Update OAuth client secrets - Apply new Keycloak-generated secrets to all services"
    deps: [validate-config]
    cmds:
      - task: configure-ansible
      - task: deploy

  # Main Deployment Task
  diva:
    desc: "Complete DIVA deployment - One-command setup: environment, configuration, and deployment"
    deps: [validate-config]
    cmds:
      - task: setup
      - task: generate-certificates
      - task: verify-certificates
      - task: configure-ansible
      - task: deploy

  # Alternative deployment with Let's Encrypt certificates
  diva-letsencrypt:
    desc: "Complete DIVA deployment with Let's Encrypt certificates - Production-ready setup with trusted certificates"
    deps: [validate-config]
    cmds:
      - task: setup
      - task: generate-certificates-letsencrypt
      - task: verify-certificates
      - task: configure-ansible
      - task: deploy

  # Cleanup Tasks
  clean-certificates:
    desc: "Remove SSL certificates - Delete all generated certificates and keystores"
    cmds:
      - rm -rf {{.CERT_DIR}}

  clean:
    desc: "Clean workspace - Remove all generated files and cloned repositories"
    cmds:
      - rm -rf {{.ROOT_DIR}}/{{.ANSIBLE_CONFIGURATOR_DIR}}
      - rm -rf {{.ROOT_DIR}}/{{.KAFKA_SETUP_DIR}}
      - rm -rf {{.ROOT_DIR}}/{{.KEYCLOAK_SETUP_DIR}}
      - rm -rf {{.ROOT_DIR}}/{{.NIFI_SETUP_DIR}}
      - task: clean-certificates
